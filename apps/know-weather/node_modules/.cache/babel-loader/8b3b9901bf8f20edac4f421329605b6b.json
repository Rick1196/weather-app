{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ricardo\\\\Documents\\\\Projects\\\\know-weather\\\\apps\\\\know-weather\\\\src\\\\components\\\\landing\\\\landing.tsx\",\n    _s = $RefreshSig$();\n\nimport i18next from 'i18next';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport usePosition from '../../custom-hooks/use-position';\nimport weatherBackground from '../../functions/weather-background';\nimport currentWeather, { getWeatherCity, getWeatherIcon } from '../../services/weather-service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Landing = () => {\n  _s();\n\n  const [weather, setWeather] = useState();\n  const position = usePosition();\n  const [weatherImage, setWeatherImage] = useState('');\n  const [weatherIcon, setWeatherIcon] = useState();\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {\n      errors\n    }\n  } = useForm();\n  const [properties, setProperties] = useState({\n    lang: i18next.language,\n    units: 'metric'\n  });\n\n  const readWeatherImage = weatherCode => {\n    const image = weatherBackground(weatherCode);\n    setWeatherImage(image);\n  };\n\n  const readWeatherIcon = iconCode => {\n    getWeatherIcon(iconCode).then(res => {\n      const code = res;\n      const reader = new FileReader();\n      reader.readAsDataURL(code);\n\n      reader.onloadend = () => {\n        const base64data = reader.result;\n        setWeatherIcon(base64data);\n      };\n    }).catch(error => console.error(error));\n  };\n\n  const getWeather = (lat, long) => {\n    currentWeather(long, lat, properties).then(res => {\n      console.log(res);\n      readWeatherIcon(res.weather[0].icon);\n      readWeatherImage(res.cod);\n      setWeather(res);\n    });\n  };\n\n  const getWeatherByCity = formData => {\n    getWeatherCity(formData.city, properties).then(res => {\n      readWeatherIcon(res.weather[0].icon);\n      readWeatherImage(res.cod);\n      setWeather(res);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  const readCurrentPositionWeather = useCallback(() => {\n    if (position) {\n      getWeather(position.coords.latitude.toFixed(2), position.coords.longitude.toFixed(2));\n    }\n  }, [position, getWeather]);\n  useEffect(() => {\n    readCurrentPositionWeather();\n  }, [position, readCurrentPositionWeather]);\n  useEffect(() => {\n    console.log(weatherImage);\n    const body = document.querySelector('body');\n\n    if (body) {\n      console.log('Setting background');\n      body.style.background = `url(${weatherImage}) no-repeat center center fixed`;\n      body.style.backgroundSize = 'cover';\n    }\n  }, [weatherImage]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: () => {\n          readCurrentPositionWeather();\n        },\n        children: \"Return to current position\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(getWeatherByCity),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"city\",\n          type: \"text\",\n          ...register('city')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [weatherIcon && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: weatherIcon,\n        alt: \"current-weather-icon\",\n        width: 200,\n        height: 200\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), weather && /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [weather.main.temp, weather.main.feels_like, weather.weather[0].description, weather.main.temp_min, weather.main.temp_max, weather.name, properties.units]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-card\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Current weather\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Landing, \"SMdvKzeY/A/XkD0LCLs9beluH6g=\", false, function () {\n  return [usePosition, useForm];\n});\n\n_c = Landing;\nexport default Landing;\n\nvar _c;\n\n$RefreshReg$(_c, \"Landing\");","map":{"version":3,"sources":["C:/Users/Ricardo/Documents/Projects/know-weather/apps/know-weather/src/components/landing/landing.tsx"],"names":["i18next","React","useCallback","useEffect","useState","useForm","usePosition","weatherBackground","currentWeather","getWeatherCity","getWeatherIcon","Landing","weather","setWeather","position","weatherImage","setWeatherImage","weatherIcon","setWeatherIcon","register","handleSubmit","watch","formState","errors","properties","setProperties","lang","language","units","readWeatherImage","weatherCode","image","readWeatherIcon","iconCode","then","res","code","reader","FileReader","readAsDataURL","onloadend","base64data","result","catch","error","console","getWeather","lat","long","log","icon","cod","getWeatherByCity","formData","city","readCurrentPositionWeather","coords","latitude","toFixed","longitude","body","document","querySelector","style","background","backgroundSize","main","temp","feels_like","description","temp_min","temp_max","name"],"mappings":"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","sourcesContent":["import i18next from 'i18next';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport usePosition from '../../custom-hooks/use-position';\r\nimport weatherBackground from '../../functions/weather-background';\r\nimport CurrentWeatherI from '../../interfaces/current-weatherI';\r\nimport { WeatherPropertiesI } from '../../interfaces/weather-propertiesI';\r\nimport currentWeather, {\r\n  getWeatherCity,\r\n  getWeatherIcon,\r\n} from '../../services/weather-service';\r\n\r\nconst Landing: React.ComponentType<Record<string, never>> = () => {\r\n  const [weather, setWeather] = useState<CurrentWeatherI>();\r\n  const position: GeolocationPosition | undefined = usePosition();\r\n  const [weatherImage, setWeatherImage] = useState<string>('');\r\n  const [weatherIcon, setWeatherIcon] = useState<string>();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    watch,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const [properties, setProperties] = useState<WeatherPropertiesI>({\r\n    lang: i18next.language,\r\n    units: 'metric',\r\n  });\r\n  const readWeatherImage = (weatherCode: number) => {\r\n    const image = weatherBackground(weatherCode);\r\n    setWeatherImage(image);\r\n  };\r\n  const readWeatherIcon = (iconCode: string) => {\r\n    getWeatherIcon(iconCode)\r\n      .then((res) => {\r\n        const code = res;\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(code);\r\n        reader.onloadend = () => {\r\n          const base64data = reader.result;\r\n          setWeatherIcon(base64data as string);\r\n        };\r\n      })\r\n      .catch((error) => console.error(error));\r\n  };\r\n  const getWeather = (lat: string, long: string) => {\r\n    currentWeather(long, lat, properties).then((res) => {\r\n      console.log(res);\r\n      readWeatherIcon(res.weather[0].icon);\r\n      readWeatherImage(res.cod);\r\n      setWeather(res);\r\n    });\r\n  };\r\n  const getWeatherByCity = (formData: { city: string }) => {\r\n    getWeatherCity(formData.city, properties)\r\n      .then((res) => {\r\n        readWeatherIcon(res.weather[0].icon);\r\n        readWeatherImage(res.cod);\r\n        setWeather(res);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  };\r\n  const readCurrentPositionWeather = useCallback(() => {\r\n    if (position) {\r\n      getWeather(\r\n        position.coords.latitude.toFixed(2),\r\n        position.coords.longitude.toFixed(2)\r\n      );\r\n    }\r\n  }, [position, getWeather]);\r\n  useEffect(() => {\r\n    readCurrentPositionWeather();\r\n  }, [position, readCurrentPositionWeather]);\r\n  useEffect(() => {\r\n    console.log(weatherImage);\r\n    const body = document.querySelector('body');\r\n    if (body) {\r\n      console.log('Setting background');\r\n      body.style.background = `url(${weatherImage}) no-repeat center center fixed`;\r\n      body.style.backgroundSize = 'cover';\r\n    }\r\n  }, [weatherImage]);\r\n  return (\r\n    <>\r\n      <div>\r\n        <button\r\n          type=\"submit\"\r\n          onClick={() => {\r\n            readCurrentPositionWeather();\r\n          }}\r\n        >\r\n          Return to current position\r\n        </button>\r\n        <form onSubmit={handleSubmit(getWeatherByCity)}>\r\n          <input id=\"city\" type=\"text\" {...register('city')} />\r\n          <button type=\"submit\">Search</button>\r\n        </form>\r\n      </div>\r\n      <div>\r\n        {weatherIcon && (\r\n          <img\r\n            src={weatherIcon}\r\n            alt=\"current-weather-icon\"\r\n            width={200}\r\n            height={200}\r\n          />\r\n        )}\r\n        {weather && (\r\n          <section>\r\n            {weather.main.temp}\r\n            {weather.main.feels_like}\r\n            {weather.weather[0].description}\r\n            {weather.main.temp_min}\r\n            {weather.main.temp_max}\r\n            {weather.name}\r\n            {properties.units}\r\n          </section>\r\n        )}\r\n      </div>\r\n      <section>\r\n        <div className=\"weather-card\">\r\n          <p>Current weather</p>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n"]},"metadata":{},"sourceType":"module"}